// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns a message indicating the API is working",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Check API health status",
                "responses": {
                    "200": {
                        "description": "API is healthy",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user by userId and PIN, then return token in cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user and generate access token",
                "parameters": [
                    {
                        "description": "Login Request Payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    },
                    "401": {
                        "description": "Invalid PIN",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token or internal error",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Clears the access_token cookie to logout the user",
                "tags": [
                    "user"
                ],
                "summary": "Logout user by clearing access token cookie",
                "responses": {
                    "200": {
                        "description": "Logout successful"
                    }
                }
            }
        },
        "/main": {
            "get": {
                "security": [
                    {
                        "ApiCookieAuth": []
                    }
                ],
                "description": "Get user profile by user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get main user profile",
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "$ref": "#/definitions/domain.GetUserMain"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "ApiCookieAuth": []
                    }
                ],
                "description": "Get current user's profile from token claims",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile for validate token is valid",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieve user data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AccountInfo": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "color": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "flag_value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_main_account": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "domain.DebitCardIno": {
            "type": "object",
            "properties": {
                "border_color": {
                    "type": "string"
                },
                "card_id": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "domain.GetUserMain": {
            "type": "object",
            "properties": {
                "account_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.AccountInfo"
                    }
                },
                "debit_card_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.DebitCardIno"
                    }
                },
                "greeting_and_banner": {
                    "$ref": "#/definitions/domain.GreetingAndBanner"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "domain.GreetingAndBanner": {
            "type": "object",
            "properties": {
                "banner_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "greeting": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "domain.ResponseStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "domain.UserResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Assignment API",
	Description:      "This is an API for the assignment project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
